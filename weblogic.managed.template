{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Template para weblogic cluster",

  "Parameters" : {

    "KeyName" : {
      "Default": "website",
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : ["m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "AdminPassword": {
      "Default": "lunes123",
      "Description" : "Weblogic admin account password (user: weblogic)",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "ClusterName": {
      "Default": "webCluster",
      "Description" : "Nombre del Cluster",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DomainName": {
      "Default": "bicevida",
      "Description" : "Nombre del domain",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "BucketName" : {
      "Default": "cl.bicevida.weblogic",
      "Description" : "Nombre del Bucket donde estan todas las cosas",
      "Type"        : "String"
    },

    "AdminPublicDNS" : {
      "Description" : "DNS publico de servidor admin",
      "Type"        : "String"
    },

    "SecurityGroupName" : {
      "Description" : "Nombre del grupo de seguridad",
      "Type"        : "String"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-5675ee3f", "64" : "ami-3275ee5b", "64HVM" : "ami-a8cd60c1" },
      "us-west-2"      : { "32" : "ami-d0be2ae0", "64" : "ami-ecbe2adc", "64HVM" : "NOT_YET_SUPPORTED" },
      "us-west-1"      : { "32" : "ami-d8d1fc9d", "64" : "ami-66d1fc23", "64HVM" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "ami-6893991c", "64" : "ami-44939930", "64HVM" : "ami-67555113" },
      "ap-southeast-1" : { "32" : "ami-a29ed2f0", "64" : "ami-aa9ed2f8", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-2" : { "32" : "ami-0f3fbf0e", "64" : "ami-173fbf16", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "ami-383eaf02", "64" : "ami-363eaf0c", "64HVM" : "NOT_YET_SUPPORTED" },
      "sa-east-1"      : { "32" : "ami-a56bb0b8", "64" : "ami-dd6bb0c0", "64HVM" : "NOT_YET_SUPPORTED" }
    }
  },

  "Resources" : {
    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect"   : "Allow",
            "Action"   : ["cloudformation:DescribeStackResource","s3:GetObject"],
            "Resource" :"*"
          }]}
        }]
      }
    },

    "CfnKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {"UserName" : {"Ref": "CfnUser"}}
    },

    "BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version"      : "2008-10-17",
          "Id"           : "MyPolicy",
          "Statement"    : [{
            "Sid"        : "ReadAccess and WriteAccess",
            "Action"     : ["s3:GetObject","s3:PutObject"],
            "Effect"     : "Allow",
            "Resource"   : { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "BucketName" },"/*"]]},
            "Principal"  : { "AWS": {"Fn::GetAtt" : ["CfnUser", "Arn"]} }
          }]
        },
        "Bucket" : { "Ref" : "BucketName" }
      }
    },
    
    "ClusterServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
              }
            },
            "sources" : {
              "/tmp/": "https://github.com/pcortezc/weblogic-cloudformation/archive/master.zip"
            },
            "files" : {
              "/tmp/domain-template.jar" : {
                "source" : { "Fn::Join" : ["", ["https://s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com/", { "Ref" : "BucketName" },"/domain/",{ "Ref" : "DomainName" },"-template.jar"]] },
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root",
                "authentication" : "S3AccessCreds"
              },
              "/etc/init.d/nodemanager": {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "# chkconfig: 2345 99 01\n",
                  "# description: NodeManager stop start autorun\n",
                  "# Source function library\n",
                  ". /etc/init.d/functions\n",
                  "start() {\n",
                  "\techo $\"Starting Weblogic\"\n",
                  "\t/bin/su root -c \"sh /opt/Oracle/Middleware/wlserver_10.3/server/bin/startNodeManager.sh  > /dev/null 2>&1 &\"\n",
                  "}\n",
                  "case \"$1\" in\n",
                  " start)\n",
                  "\tstart\n",
                  "\t;;\n",
                  " stop)\n",
                  "\t;;\n",
                  " restart)\n",
                  "\tstart\n",
                  "\t;;\n",
                  " *)\n",
                  "\techo \"Usage: $0 {start|stop|restart}\"\n",
                  "esac\n",
                  "exit 0\n"
                ]]},
                "mode"   : "000755",
                "owner"  : "root",
                "group"  : "root"
              },
              "/etc/init.d/weblogic": {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "# chkconfig: 2345 20 80\n",
                  "# description: Weblogic admin server sync\n",
                  "# Source function library\n",
                  ". /etc/init.d/functions\n",
                  "start() {\n",
                  "\techo $\"Uploading correct data to admin  Weblogic\"\n",
                  "\ttouch /var/lock/subsys/weblogic\n",
                  "\t/bin/su root -c \"sh /opt/Oracle/Middleware/wlserver_10.3/common/bin/wlst.sh /tmp/weblogic-cloudformation-master/scripts/start_managed.py\"\n",
                  "}\n",
                  "stop() {\n",
                  "\techo $\"Deleting server from admin  Weblogic\"\n",
                  "\t/bin/su root -c \"sh /opt/Oracle/Middleware/wlserver_10.3/common/bin/wlst.sh /tmp/weblogic-cloudformation-master/scripts/stop_managed.py\"\n",
                  "\trm -f /var/lock/subsys/weblogic\n",
                  "}\n",
                  "case \"$1\" in\n",
                  " start)\n",
                  "\tstart\n",
                  "\t;;\n",
                  " stop)\n",
                  "\tstop\n",
                  "\t;;\n",
                  " restart)\n",
                  "\tstart\n",
                  "\t;;\n",
                  " *)\n",
                  "\techo \"Usage: $0 {start|stop|restart}\"\n",
                  "esac\n",
                  "exit 0\n"
                ]]},
                "mode"   : "000755",
                "owner"  : "root",
                "group"  : "root"
              },
              "/tmp/install_s3curl.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "mkdir -p /tmp/aws\n",
                  "mkdir -p /usr/local/share\n",
                  "mkdir -p /usr/local/bin\n",
                  "curl --silent --output /tmp/aws/s3-curl.zip http://s3.amazonaws.com/doc/s3-example-code/s3-curl.zip\n",
                  "unzip -d /tmp/aws /tmp/aws/s3-curl.zip\n",
                  "chmod 755 /tmp/aws/s3-curl/s3curl.pl\n",
                  "rm -fR /usr/local/share/s3-curl\n",
                  "mv /tmp/aws/s3-curl /usr/local/share\n",
                  "mv /usr/local/share/s3-curl/s3curl.pl /usr/local/bin\n",
                  "rm -fR /tmp/aws/s3-curl*\n"
                ]]},
                "mode"   : "000777",
                "owner"  : "root",
                "group"  : "root"
              }
            }
          }
        },
        "AWS::CloudFormation::Authentication" : {
          "S3AccessCreds" : {
            "type" : "S3",
            "accessKeyId" : { "Ref" : "CfnKeys" },
            "secretKey" : {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]},
            "buckets" : [ { "Ref" : "BucketName" } ]
          }
        }
      },
      "Properties": {
        "ImageId": "ami-59e27469",
        "AvailabilityZone" : "us-west-2a",
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ { "Ref": "SecurityGroupName"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install Apache Web Server\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r ClusterServer ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# INSTALL DOMAIN\n",
          "sh /opt/Oracle/Middleware/wlserver_10.3/common/bin/unpack.sh -domain=/opt/Oracle/Middleware/user_projects/domains/",{ "Ref" : "DomainName" }," -template=/tmp/domain-template.jar\n",

          "# SSL CONFIG\n",
          "sed -i \"/export PATH/a\\JAVA_OPTIONS=\\\"\\${JAVA_OPTIONS} -Dweblogic.nodemanager.sslHostNameVerificationEnabled=false\\\"\" /opt/Oracle/Middleware/wlserver_10.3/server/bin/startNodeManager.sh\n",
          "sed -i \"/START WEBLOGIC/a\\JAVA_OPTIONS=\\\"\\${JAVA_OPTIONS} -Dweblogic.security.SSL.ignoreHostnameVerification=true\\\"\"  /opt/Oracle/Middleware/user_projects/domains/bicevida/bin/startWebLogic.sh\n",

          "#SETTINGS\n",
          "sed -i \"s/ADMIN_IP/",{ "Ref" : "AdminPublicDNS" },"/g\" /tmp/weblogic-cloudformation-master/scripts/settings\n",
          "sed -i \"s/R_DOMAIN/",{ "Ref" : "DomainName" },"/g\" /tmp/weblogic-cloudformation-master/scripts/settings\n",
          "sed -i \"s/R_CLUSTER/",{ "Ref" : "ClusterName" },"/g\" /tmp/weblogic-cloudformation-master/scripts/settings\n",
          "sed -i \"s/R_PWD/",{ "Ref" : "AdminPassword" },"/g\" /tmp/weblogic-cloudformation-master/scripts/settings\n",


          "#CREATE MACHINE AND SERVER\n",
          "sh /opt/Oracle/Middleware/wlserver_10.3/common/bin/wlst.sh /tmp/weblogic-cloudformation-master/scripts/start_managed.py\n",
          
          "# START WEBLOGIC SERVER\n",
          "nohup sh /opt/Oracle/Middleware/wlserver_10.3/server/bin/startNodeManager.sh > /dev/null 2>&1 &\n",

          "# AUTO START\n",
          "chkconfig --add weblogic\n",
          "chkconfig --add nodemanager\n",
          "chkconfig weblogic on\n",
          "chkconfig nodemanager on\n",

          "# All is well so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"Weblogic setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },
    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ClusterServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "3600"
      }
    }
  },
  "Outputs" : {
    "PublicDNS" : {
      "Value" : { "Fn::Join" : ["", [ { "Fn::GetAtt" : [ "ClusterServer", "PublicDnsName" ]}]] },
      "Description" : "App server URLS"
    }
  }
}
